openapi: 3.0.2
info:
  title: Login Service for Officium
  version: 1.0.0
paths:
  /login/name:
    get:
      description: Gets a user by its user name
      operationId: getUserByName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'

  /login/emailaddress:
    get:
      description: Gets a user by its email address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailAddress'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'

components:
  schemas:
    userName:
      type: string
      example: "johnfoo"
    emailAddress:
      type: string
      example: "john.foo@organization.com"
    userRequest:
      type: object
      required:
        - username
        - emailaddress
      properties:
        name:
          type: string
          description: name of the user
          example: "Foo"
        surname:
          type: string
          description: first name of the user
          example: "John"
        username:
          type: string
          description: user name of the user, user name has to be unique in the system, can be used for login
          example: "johnfoo"
        emailaddress:
          type: string
          format: email
          description: e-mail address of the user, needs to be unique in the system, can be used for login
          example: "john.foo@organization.com"
        password:
          type: string
          description: hash value of the original password of the user
          example: "02348ß9831ß498"
        defaultPicture:
          type: string
          description: Name of a default picture provided by the system
          example: "robbery chieftain"
    userResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: '21a2bac3-a2c4-4e45-b6da-2248bb36b82e'
        user:
          $ref: '#/components/schemas/userRequest'
        message:
          $ref: '#/components/schemas/Message'
        usefulLinks:
          type: array
          items:
            $ref: '#/components/schemas/UsefulLink'

    UsefulLink:
      type: object
      description: Link to an object which can be enhanced
      properties:
        href:
          type: string
          format: uriref
          description: Referenz link to a helpful information
          example: 'http://mytaskmanagerserver/users/bf62265f-77e3-413c-b40a-0a72da00b7b'
        type:
          type: string
          description: type of according reference
          enum:
            - PDF
            - Hyperlink
          example: 'Hyperlink'
        relation:
          type: string
          description: Relation of the according link to the provided object, Object usually
            means the access to the object itself
          enum:
            - Object
            - Assignee
            - Thread
          example: 'Assignee'

    Message:
      type: object
      description: Message in case of an error
      required:
        - Code
        - Severity
        - Message
        - TrackingId
      properties:
        Code:
          type: string
          description: Code of the according error
          example: 'TASKCREATED'
        Severity:
          type: string
          description: Severity of the according message
          enum:
            - SUCCESS
            - WARNING
            - ERROR
            - CRITICALERROR
          example: 'SUCCESS'
        Message:
          type: string
          description: Message of the according action
          example: 'Task Create a new task management successfully created'
        TrackingId:
          type: string
          description: Unique ID to follow a message through the entire system
          example: '30ddd105-fe30-4b4a-b993-379ef903201b'

    UserImage:
      type: object
      description: Profile picture of a particular user
      required:
        - id
        - image
      properties:
        id:
          type: string
          description: ID of the particular user
          format: uuid
          example: '30ddd105-fe30-4b4a-b993-379ef903201b'
        fileName:
          type: string
          description: File name of the image
          example: 'john.png'
        mimeType:
          type: string
          enum:
            - png
            - jpg
          description: Mime type of the picture
          example: 'png'
        image:
          type: string
          description: byte array as presentation of binary image
          format: binary